#!/local/bin/perl 

# This is a simple command line UA that can run several requests in
# parallel.  You can control degree of pipelining and set debugging
# flags too.

use strict;
use LWP::UA;
$LWP::UA::DEBUG++;
my $ua = LWP::UA->new;

$ua->conn_param(ReqLimit    => 3,
                ReqPending  => 1,
		Timeout     => 30,
		IdleTimeout => 10);

$ua->env_proxy;

require LWP::Request;
require LWP::Conn::HTTP;

use LWP::MainLoop qw(empty one_event readable);

$| = 1;
print "ua> ";
readable(\*STDIN, \&cmd);

while (!empty) {
    one_event();
}
exit;

sub cmd
{
    my $cmd;
    my $n = sysread(STDIN, $cmd, 512);
    chomp($cmd);
    eval {
	if ($cmd eq "q") {
	    exit;
	} elsif ($cmd eq "p") {
	    print $ua->as_string;
	} elsif ($cmd eq "dc") {
	    $LWP::Conn::HTTP::DEBUG = !$LWP::Conn::HTTP::DEBUG;
	    print "Connection debug is ",
	          ($LWP::Conn::HTTP::DEBUG ? "on" : "off"), "\n";
	} elsif ($cmd eq "de") {
	    $LWP::EventLoop::DEBUG = !$LWP::EventLoop::DEBUG;
	    print "Eventlopp debug is ",
	          ($LWP::EventLoop::DEBUG ? "on" : "off"), "\n";
	} elsif ($cmd eq "sched") {
	    $ua->reschedule;
	} elsif ($cmd =~ /^c\s+(\S+)/) {
	    $ua->find_server($1)->create_connection;
	} elsif ($cmd =~ /^cp\s+(.*)/) {
	    $ua->conn_param(split(' ', $1));
	} elsif ($cmd eq "s") {
	    $ua->stop;
	} elsif ($cmd =~ /^s\s+(\S+)/) {
	    $ua->find_server($1)->stop;
	} elsif ($cmd =~ /^\s*(\w+)\s+(\S+)/i) {
	    my $req = LWP::Request->new2(uc($1) => $2);
	    #$req->{'auto_redirect'}++;
	    #$req->{'auto_auth'}++;
	    $ua->spool($req);
        } elsif ($cmd =~ /^\s*!\s*(.*)/) {
	    my $ret = eval $1;
	    if ($@) {
		print $@;
	    } else {
		eval {
		    require Data::Dumper;
		    local $Data::Dumper::Terse = 1;
		    local $Data::Dumper::Indent = 0;
		    print Data::Dumper::Dumper($ret), "\n";
		};
		print $@ if $@;
	    }
        } elsif ($cmd eq "?" || $cmd eq "help") {
            print <<EOT;

<method> <url> : spool request
s              : stop all requests
s <url>        : stop requests for this server
p              : print state of UA
c <url>        : set up connection to this host
cp <key> <val> : set connection parameters
q              : quit

de             : toggle event loop debugging
dc             : toggle connection debugging
! <perl-code>  : evaluate some perl code (and print result)

EOT
	} else {
	    print "Unknown command '$cmd'.  The command '?' list known commands\n";
	}
    };
    print STDERR $@ if $@;
    print "ua> ";
}
